name: Daily AI News Briefing

on:
  schedule:
    # 8:00, 12:00, 18:00 BRT (UTC-3)
    - cron: '0 11,15,21 * * *'  # UTC times: 11:00, 15:00, 21:00
  workflow_dispatch:  # Manual trigger for testing
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'config/**'
      - '.github/workflows/daily-briefing.yml'
      - 'requirements.txt'

jobs:
  briefing:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Diagnostics (env & secrets presence)
      run: |
        echo "Python: $(python --version)"
        echo "HAS_TOKEN=$HAS_TOKEN"
        echo "HAS_CHAT=$HAS_CHAT"
      env:
        HAS_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN != '' }}
        HAS_CHAT: ${{ secrets.TELEGRAM_CHAT_ID != '' }}

    - name: Sanitize Telegram secrets
      shell: bash
      env:
        RAW_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        RAW_CHAT: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        token="$(printf "%s" "$RAW_TOKEN" | tr -d '\r' | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
        chat="$(printf "%s" "$RAW_CHAT" | tr -d '\r' | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
        # Strip quotes and common prefixes
        token=${token//\"/}
        token=${token//\'/}
        chat=${chat//\"/}
        chat=${chat//\'/}
        chat=${chat#chat_id=}
        chat=${chat#chat=}
        # Keep only allowed chars
        chat=$(echo "$chat" | sed 's/[^0-9-]//g')
        token=$(echo "$token" | sed 's/[^A-Za-z0-9:_-]//g')
        # Validate formats
        if [[ "$token" =~ ^[0-9]{5,}:[A-Za-z0-9_-]{30,}$ ]]; then TOKEN_FORMAT_OK=true; else TOKEN_FORMAT_OK=false; fi
        if [[ "$chat" =~ ^-?[0-9]{5,}$ ]]; then CHAT_FORMAT_OK=true; else CHAT_FORMAT_OK=false; fi
        {
          echo "TOKEN_SANITIZED<<EOF"
          printf "%s" "$token"
          echo
          echo "EOF"
          echo "CHAT_SANITIZED<<EOF"
          printf "%s" "$chat"
          echo
          echo "EOF"
        } >> "$GITHUB_ENV"
        echo "TOKEN_LEN=${#token}"
        echo "CHAT_LEN=${#chat}"
        echo "TOKEN_FORMAT_OK=$TOKEN_FORMAT_OK"
        echo "CHAT_FORMAT_OK=$CHAT_FORMAT_OK"

    - name: Telegram preflight ping
      continue-on-error: true
      env:
        TELEGRAM_BOT_TOKEN: ${{ env.TOKEN_SANITIZED }}
        TELEGRAM_CHAT_ID: ${{ env.CHAT_SANITIZED }}
      run: |
        echo "ðŸ”Ž Telegram getMe:" 
        curl -sS -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getMe" || true
        echo "\nðŸ“¨ Sending preflight message..."
        curl -sS -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
             -H "Content-Type: application/json" \
             -d "{\"chat_id\":\"${TELEGRAM_CHAT_ID}\",\"text\":\"âœ… GitHub Actions preflight ping\",\"disable_web_page_preview\":true}" || true

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create logs directory
      run: mkdir -p logs

    - name: Run briefing
      env:
        TELEGRAM_BOT_TOKEN: ${{ env.TOKEN_SANITIZED }}
        TELEGRAM_CHAT_ID: ${{ env.CHAT_SANITIZED }}
        DEBUG: ${{ github.event_name == 'workflow_dispatch' }}
        SEND_EMPTY_BRIEFING: true
      run: |
        echo "ðŸš€ Starting AI News Briefing at $(date)"
        python src/main.py 2>&1 | tee logs/briefing_$(date +%Y%m%d_%H%M%S).log

    - name: Upload logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: briefing-logs
        path: logs/
        retention-days: 7
